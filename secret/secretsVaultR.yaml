AWSTemplateFormatVersion: '2010-09-09'
Description: 'Secrets manager + Role stack'
Parameters:
  sName:
    Description: 'Second part of the secret ID'
    Type: String
    Default: 'Test101'
  KmsKeyArn:
    Description: 'KMS key Arn'
    Type: String
    Default: ''
  GrantAdmin:
    Description: Make the user capable to update the AWS SM secret.
    Default: 'yes'
    Type: String
    AllowedValues:
      - 'yes'
      - 'no'
Conditions:
  HasKmsKeyArn: !Not
    - !Equals 
      - !Ref KmsKeyArn
      - ''
  IsAdmin: !Equals 
    - !Ref GrantAdmin
    - 'yes'

Resources:
  secretsVault:
    Type: AWS::SecretsManager::Secret
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Name: !Sub '${AWS::StackName}${sName}'
      Description: !Sub '${AWS::StackName} secrets manager'
      KmsKeyId: !If 
        - HasKmsKeyArn
        - !Ref KmsKeyArn
        - !Ref 'AWS::NoValue'
  secretsVaultResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      BlockPublicPolicy: True
      SecretId: !Ref secretsVault
      ResourcePolicy:
        Version: '2012-10-17'
        Statement:
          - Resource: 
            - !Ref secretsVault
            Action:
              !If 
                - IsAdmin
                - secretsmanager:*
                - - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                  - secretsmanager:ListSecrets
            Effect: Allow
            Principal:
              AWS: 
                - !Sub '${AWS::AccountId}'
                # - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
                # - !Sub arn:aws:iam::${AWS::AccountId}:role/role-name
                # - !Sub arn:aws:sts::${AWS::AccountId}:assumed-role/role-name/role-session-name
                # - !Sub arn:aws:iam::${AWS::AccountId}:user/user-name
                - !GetAtt secretsVaultRole.Arn
              Service: 
                - 'ec2.amazonaws.com'
                - 'codepipeline.amazonaws.com'
                - 'lambda.amazonaws.com'

  secretsVaultRole: 
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              AWS: 
                - !Sub '${AWS::AccountId}'
              Service: 
                - 'ec2.amazonaws.com'
                - 'codepipeline.amazonaws.com'
                - 'lambda.amazonaws.com'
                - 'apigateway.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Path: '/'

Outputs:
  secretsVaultArn:
    Value: !Ref secretsVault
    Export:
      Name: !Sub '${AWS::StackName}SmArn'
  secretsVaultRoleArn:
    Value: !GetAtt secretsVaultRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}SmRoleArn'
  # secretsVaultRoleId:
  #   Value: !GetAtt secretsVaultRole.RoleId
  #   Export:
  #     Name: !Sub '${AWS::StackName}SmRoleId'
  

